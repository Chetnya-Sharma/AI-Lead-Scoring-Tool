# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K-1CUVz6x8VsZXdDRWJu54QUEgyFK0Pb
"""



import pandas as pd
import streamlit as st
import lightgbm as lgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import joblib
import numpy as np

st.title("Caprae Capital | AI Lead Scoring Tool")

st.markdown("""
This tool prioritizes leads based on company features like role, location, industry, and revenue.
Upload your dataset, optionally train the model, and score your leads based on business relevance.
""")

# Upload CSV File
uploaded_file = st.file_uploader("Upload CSV", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.subheader("Preview of Uploaded Data")
    st.write(df.head())

    # Check required columns
    required_cols = ["Company", "Role", "Location", "Industry", "Revenue"]
    if not all(col in df.columns for col in required_cols):
        st.error("CSV must contain: Company, Role, Location, Industry, Revenue")
    else:
        # Feature Engineering
        df["Is_C_Level"] = df["Role"].str.contains("(?i)chief|ceo|cfo|coo|cto|founder|president", regex=True).astype(int)
        df["Is_Tech"] = df["Industry"].str.contains("(?i)tech|software|saas|cloud|ai", regex=True).astype(int)
        df["Is_US"] = df["Location"].str.contains("(?i)united states|usa|california|new york", regex=True).astype(int)
        df["Log_Revenue"] = df["Revenue"].apply(lambda x: pd.to_numeric(x, errors='coerce')).fillna(0).apply(lambda x: np.log1p(x))

        X = df[["Is_C_Level", "Is_Tech", "Is_US", "Log_Revenue"]]

        if "Label" in df.columns:
            y = df["Label"]

            st.subheader("Train Lead Scoring Model")
            if st.button("Train Model"):
                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
                model = lgb.LGBMClassifier()
                model.fit(X_train, y_train)
                y_pred = model.predict(X_test)
                st.code(classification_report(y_test, y_pred))
                joblib.dump(model, "lead_scorer.pkl")
                st.success("Model trained and saved as 'lead_scorer.pkl'")

        st.subheader("Score Leads with AI")
        if st.button("Score Uploaded Leads"):
            try:
                model = joblib.load("lead_scorer.pkl")
                df["Score"] = model.predict_proba(X)[:, 1]
                df["Category"] = pd.cut(df["Score"], bins=[0, 0.4, 0.7, 1], labels=["Low", "Medium", "High"])
                st.write(df[["Company", "Role", "Location", "Industry", "Revenue", "Score", "Category"]])

                st.download_button("Download Results", df.to_csv(index=False), file_name="scored_leads.csv")
            except Exception as e:
                st.error("Model not found. Please train first.")
